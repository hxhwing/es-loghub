
# [START cloudbuild]
steps:
# Create new GKE clsuter
- name: 'hashicorp/terraform:1.0.0'
  id: Create new GKE cluster
  entrypoint: 'sh'
  args: 
  - '-c'
  - |
    source stack.conf
    if [ "$create_new_cluster" == "true" ]; then
      sed -i "s/BACKEND_BUCKET_NAME/$bucket_name/g" gke/providers.tf
      sed -i "s/REGION_ID/$region/g" gke/variables.tf
      sed -i "s/PROJECT_ID/$PROJECT_ID/g" gke/variables.tf
      sed -i "s/CLUSTER_NAME/$cluster_name/g" gke/variables.tf

      cd gke
      terraform init
      terraform apply --auto-approve
    else
      echo "*************** No need to create new GKE cluster ******************"
    fi

# Create new node pool for Elasticsearch
- name: 'hashicorp/terraform:1.0.0'
  id: Create new nodepool
  waitFor:
  - Create new GKE cluster
  entrypoint: 'sh'
  args: 
  - '-c'
  - |
    source stack.conf
    if [ "$create_new_nodepool" == "true" ]; then
      echo "===Generating manifest of node pool==="
      sed -i "s/BACKEND_BUCKET_NAME/$bucket_name/g" nodepool/providers.tf
      sed -i "s/REGION_ID/$region/g" nodepool/variables.tf
      sed -i "s/PROJECT_ID/$PROJECT_ID/g" nodepool/variables.tf
      sed -i "s/CLUSTER_NAME/$cluster_name/g" nodepool/variables.tf

      sed -i "s/INSTANCE_TYPE/$instance_type/g" nodepool/variables.tf
      sed -i "s/INITIAL_NODE_COUNT/$node_count/g" nodepool/variables.tf

      echo "===Create new node pool==="
      cd nodepool
      terraform init
      terraform apply --auto-approve
    else
      echo "*************** No need to create new GKE nodepool ******************"
    fi



# Deploy Elasitcsearch components
- name: 'hashicorp/terraform:1.0.0'
  id: Deploy Elasticsearch components
  waitFor:
  - Create new nodepool
  entrypoint: 'sh'
  args: 
  - '-c'
  - |
    source stack.conf    
    echo "===Generating manifest of Elasticsearch==="
    sed -i "s/BACKEND_BUCKET_NAME/$bucket_name/g" elasticsearch/providers.tf
    sed -i "s/REGION_ID/$region/g" elasticsearch/variables.tf
    sed -i "s/PROJECT_ID/$PROJECT_ID/g" elasticsearch/variables.tf
    sed -i "s/CLUSTER_NAME/$cluster_name/g" elasticsearch/variables.tf

    sed -i "s/NAMESPACE/$namespace/g" elasticsearch/main.tf
    sed -i "s/PROJECT_ID/$PROJECT_ID/g" elasticsearch/main.tf

    sed -i "s/NAMESPACE/$namespace/g" elasticsearch/manifests/es-sa.yaml
    sed -i "s/PROJECT_ID/$PROJECT_ID/g" elasticsearch/manifests/es-sa.yaml

    sed -i "s/NAMESPACE/$namespace/g" elasticsearch/manifests/elasticsearch.yaml
    sed -i "s/ELASTICSEARCH_VERSION/$elasticsearch_version/g" elasticsearch/manifests/elasticsearch.yaml
    sed -i "s/MASTER_NODE_COUNT/$master_node_count/g" elasticsearch/manifests/elasticsearch.yaml
    sed -i "s/HOT_NODE_COUNT/$hot_node_count/g" elasticsearch/manifests/elasticsearch.yaml
    sed -i "s/HOT_STORAGE_SIZE/$hot_storage_size/g" elasticsearch/manifests/elasticsearch.yaml
    sed -i "s/WARM_NODE_COUNT/$warm_node_count/g" elasticsearch/manifests/elasticsearch.yaml
    sed -i "s/WARM_STORAGE_SIZE/$warm_storage_size/g" elasticsearch/manifests/elasticsearch.yaml

    sed -i "s/NAMESPACE/$namespace/g" elasticsearch/manifests/kibana.yaml
    sed -i "s/KIBANA_VERSION/$kibana_version/g" elasticsearch/manifests/kibana.yaml
    
    echo "===Deploy Elasticsearch stacks==="
    cd elasticsearch
    terraform init
    terraform apply --auto-approve

- name: 'gcr.io/google.com/cloudsdktool/google-cloud-cli:latest'
  id: Get ES endpoint and credentials
  entrypoint: /bin/bash
  args:
  - '-c'
  - |
    source stack.conf
    echo "===Get Elasticsearch access endpoint and credentials==="
    gcloud container clusters get-credentials $cluster_name --region $LOCATION
    es_password=$(kubectl get secret ${cluster_name}-es-elastic-user -n es -o go-template='{{.data.elastic | base64decode }}')
    es_ip=$(kubectl get svc ${cluster_name}-es-http -n es -o jsonpath='{.status.loadBalancer.ingress[].ip}')
    es_endpoint="https://$es_ip:9200"

    kibana_ip=$(kubectl get svc kibana-kb-http -n es -o jsonpath='{.status.loadBalancer.ingress[].ip}')
    kibana_endpoint="https://$kibana_ip:5601"

    echo "===Create Elasticsearch API Key==="
    es_apikey=$(curl -s --insecure -u elastic:$es_password -XGET ${es_endpoint}/_security/api_key?name=admin | grep false)
    if [ -z "$es_apikey" ]; then
      es_apikey=$(curl -s --insecure -u elastic:$es_password -XPOST ${es_endpoint}/_security/api_key?pretty -H 'Content-Type: application/json' -d '{"name": "admin"}' | python3 -c "import sys, json; print(json.load(sys.stdin)['encoded'])")
    else
      curl -s --insecure -u elastic:$es_password -XDELETE ${es_endpoint}/_security/api_key?pretty -H 'Content-Type: application/json' -d '{"name": "admin"}'
      es_apikey=$(curl -s --insecure -u elastic:$es_password -XPOST ${es_endpoint}/_security/api_key?pretty -H 'Content-Type: application/json' -d '{"name": "admin"}' | python3 -c "import sys, json; print(json.load(sys.stdin)['encoded'])")
    fi
    
    echo "=== Write environment into /workspace files for following steps ==="
    echo $es_endpoint > /workspace/es_endpoint
    echo $es_password > /workspace/es_password
    echo $es_apikey > /workspace/es_apikey

    echo "=== Access Kibana UI through: ${kibana_endpoint}   ==="
    echo "=== Username: elastic; Password: ${es_password}   ==="

# Setup Managed Prometheus for Elasticsearch monitoring
- name: 'hashicorp/terraform:1.0.0'
  id: Setup Managed Prometheus for monitoring
  entrypoint: 'sh'
  args: 
  - '-c'
  - |
    source stack.conf
    es_apikey=$(cat /workspace/es_apikey)

    echo "===Generating manifest of elasticsearch-exporter==="
    sed -i "s/BACKEND_BUCKET_NAME/$bucket_name/g" monitoring/providers.tf
    sed -i "s/REGION_ID/$region/g" monitoring/variables.tf
    sed -i "s/PROJECT_ID/$PROJECT_ID/g" monitoring/variables.tf
    sed -i "s/CLUSTER_NAME/$cluster_name/g" monitoring/variables.tf

    sed -i "s/ES_APIKEY/$es_apikey/g" monitoring/manifests/apikey.yaml
    sed -i "s/NAMESPACE/$namespace/g" monitoring/manifests/apikey.yaml
    sed -i "s/NAMESPACE/$namespace/g" monitoring/manifests/elasticsearch-exporter.yaml
    sed -i "s/NAMESPACE/$namespace/g" monitoring/manifests/podmonitoring.yaml
    sed -i "s/CLUSTER_NAME/$cluster_name/g" monitoring/manifests/elasticsearch-exporter.yaml

    echo "=== Install elasticsearch-exporter and PodMonitoring ==="
    cd monitoring
    terraform init
    terraform apply --auto-approve

# Store Elasitcsearch endpoint and credentials into Secret Manager
- name: 'hashicorp/terraform:1.0.0'
  id: Store Elasitcsearch endpoint and credentials into Secret Manager
  entrypoint: 'sh'
  args: 
  - '-c'
  - |
    source stack.conf
    echo "===Get variables from previous step==="
    es_endpoint=$(cat /workspace/es_endpoint)
    es_password=$(cat /workspace/es_password)
    es_apikey=$(cat /workspace/es_apikey)

    # echo "=== Elasticsearch endpoint: ${es_endpoint} ==="
    # echo "=== Elasticsearch password: ${es_password} ==="
    # echo "=== Elasticsearch API Key: ${es_apikey} ==="

    echo "===Generating terraform templates for Secret Manager==="
    sed -i "s/BACKEND_BUCKET_NAME/$bucket_name/g" secretmanager/providers.tf
    sed -i "s/REGION_ID/$region/g" secretmanager/variables.tf
    sed -i "s/PROJECT_ID/$PROJECT_ID/g" secretmanager/variables.tf

    sed -i "s/ES_ENDPOINT/$es_endpoint/g" secretmanager/main.tf
    sed -i "s/ES_PASSWORD/$es_password/g" secretmanager/main.tf
    sed -i "s/ES_APIKEY/$es_apikey/g" secretmanager/main.tf

    echo "===Store es_endpoint, es_password, es_apikey into Secret Manager==="
    cd secretmanager
    terraform init
    terraform apply --auto-approve

# [END cloudbuild-trigger-cd]
