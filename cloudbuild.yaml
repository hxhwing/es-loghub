
# [START cloudbuild]
steps:
# Create new GKE clsuter
- name: 'hashicorp/terraform:latest'
  id: Create new GKE cluster
  entrypoint: 'sh'
  args: 
  - '-c'
  - |
    source deployment.conf
    sed -i "s/BACKEND_BUCKET_NAME/$bucket_name/g" gke/providers.tf
    sed -i "s/REGION_ID/$region/g" gke/variables.tf
    sed -i "s/PROJECT_ID/$PROJECT_ID/g" gke/variables.tf
    sed -i "s/CLUSTER_NAME/$cluster_name/g" gke/variables.tf

    if [ "$create_new_cluster" == "true" ]; then
      cd gke
      terraform init
      terraform apply --auto-approve
    else
      echo "*************** No need to create new GKE cluster ******************"
    fi

# Create new node pool for Elasticsearch
- name: 'hashicorp/terraform:latest'
  id: Create new nodepool
  waitFor:
  - Create new GKE cluster
  entrypoint: 'sh'
  args: 
  - '-c'
  - |
    source deployment.conf
    echo "===Generating manifest of node pool==="
    sed -i "s/BACKEND_BUCKET_NAME/$bucket_name/g" nodepool/providers.tf
    sed -i "s/REGION_ID/$region/g" nodepool/variables.tf
    sed -i "s/PROJECT_ID/$PROJECT_ID/g" nodepool/variables.tf
    sed -i "s/CLUSTER_NAME/$cluster_name/g" nodepool/variables.tf

    sed -i "s/INSTANCE_TYPE/$instance_type/g" nodepool/variables.tf
    sed -i "s/INITIAL_NODE_COUNT/$node_count/g" nodepool/variables.tf

    if [ "$create_new_nodepool" == "true" ]; then
      echo "===Create new node pool==="
      cd nodepool
      terraform init
      terraform apply --auto-approve
    else
      echo "*************** No need to create new GKE nodepool ******************"
    fi



# Deploy Elasitcsearch components
- name: 'hashicorp/terraform:latest'
  id: Deploy Elasticsearch components
  waitFor:
  - Create new nodepool
  entrypoint: 'sh'
  args: 
  - '-c'
  - |
    source deployment.conf    
    echo "===Generating manifest of Elasticsearch deployment==="
    sed -i "s/BACKEND_BUCKET_NAME/$bucket_name/g" elasticsearch/providers.tf
    sed -i "s/REGION_ID/$region/g" elasticsearch/variables.tf
    sed -i "s/PROJECT_ID/$PROJECT_ID/g" elasticsearch/variables.tf
    sed -i "s/CLUSTER_NAME/$cluster_name/g" elasticsearch/variables.tf

    sed -i "s/NAMESPACE/$namespace/g" elasticsearch/main.tf
    sed -i "s/PROJECT_ID/$PROJECT_ID/g" elasticsearch/main.tf

    sed -i "s/NAMESPACE/$namespace/g" elasticsearch/manifests/es-sa.yaml
    sed -i "s/PROJECT_ID/$PROJECT_ID/g" elasticsearch/manifests/es-sa.yaml

    sed -i "s/NAMESPACE/$namespace/g" elasticsearch/manifests/elasticsearch.yaml
    sed -i "s/ELASTICSEARCH_VERSION/$elasticsearch_version/g" elasticsearch/manifests/elasticsearch.yaml
    sed -i "s/MASTER_NODE_COUNT/$master_node_count/g" elasticsearch/manifests/elasticsearch.yaml
    sed -i "s/HOT_NODE_COUNT/$hot_node_count/g" elasticsearch/manifests/elasticsearch.yaml
    sed -i "s/HOT_STORAGE_SIZE/$hot_storage_size/g" elasticsearch/manifests/elasticsearch.yaml
    sed -i "s/WARM_NODE_COUNT/$warm_node_count/g" elasticsearch/manifests/elasticsearch.yaml
    sed -i "s/WARM_STORAGE_SIZE/$warm_storage_size/g" elasticsearch/manifests/elasticsearch.yaml

    sed -i "s/NAMESPACE/$namespace/g" elasticsearch/manifests/kibana.yaml
    sed -i "s/KIBANA_VERSION/$kibana_version/g" elasticsearch/manifests/kibana.yaml
  

    if [ "$deploy_elasticsearch" == "true" ]; then
      echo "===Deploy Elasticsearch stacks==="
      cd elasticsearch
      terraform init
      terraform apply --auto-approve

    else
      echo "*************** No elasticsearch required ******************"
      cd elasticsearch
      terraform init
      terraform destroy --auto-approve
    fi

- name: 'gcr.io/google.com/cloudsdktool/google-cloud-cli:latest'
  id: Get ES endpoint and Credentials
  entrypoint: /bin/bash
  args:
  - '-c'
  - |
    source deployment.conf
    echo "===Get Elasticsearch access endpoint and credentials==="
    gcloud container clusters get-credentials $cluster_name --region $LOCATION
    es_password=$(kubectl get secret escluster-es-elastic-user -n es -o go-template='{{.data.elastic | base64decode }}')
    es_ip=$(kubectl get svc escluster-es-http -n es -o jsonpath='{.status.loadBalancer.ingress[].ip}')
    es_endpoint="https://${es_ip}:9200"
    kibana_ip=$(kubectl get svc kibana-kb-http -n es -o jsonpath='{.status.loadBalancer.ingress[].ip}')
    kibana_endpoint="https://$kibana_ip:5601"

    if [ "$deploy_elasticsearch" == "true" ]; then

      echo "===Check cluster status==="
      status=$(curl -s --insecure -u elastic:$es_password -XGET ${es_endpoint}/_cluster/health?pretty | python3 -c "import sys, json; print(json.load(sys.stdin)['status'])")
      while [ "$status" != "green" ]
      do
        echo "===Cluster is ${status}, waiting==="
        status=$(curl -s --insecure -u elastic:$es_password -XGET ${es_endpoint}/_cluster/health?pretty | python3 -c "import sys, json; print(json.load(sys.stdin)['status'])")
        sleep 10s
      done

      echo "=== Write environment into /workspace files for following steps ==="
      echo $es_ip > /workspace/es_ip
      echo $es_password > /workspace/es_password

      echo "=== Access Kibana UI through: ${kibana_endpoint}   ==="
      echo "=== Username: admin; Get password from Secret Manager "es_password" ==="

    else
      gsutil rm -rf gs://$bucket_name/terraform/state/esconfig
      echo "*************** No elasticsearch required ******************"
    fi

- name: 'hashicorp/terraform:latest'
  id: Create ES API key, User credentials and Index templates
  entrypoint: 'sh'
  args:
  - '-c'
  - |
    source deployment.conf
    if [ "$deploy_elasticsearch" == "true" ]; then
      es_ip=$(cat /workspace/es_ip)
      es_password=$(cat /workspace/es_password)
      es_endpoint="https://${es_ip}:9200"

      # echo "=== Elasticsearch endpoint: ${es_endpoint} ==="
      # echo "=== Elasticsearch password: ${es_password} ==="

      echo "===Generating manifest of Elasticsearch configuration==="
      sed -i "s/BACKEND_BUCKET_NAME/$bucket_name/g" esconfig/providers.tf
      sed -i "s/ES_PASSWORD/$es_password/g" esconfig/providers.tf
      sed -i "s/ES_IP/$es_ip/g" esconfig/providers.tf
      sed -i "s/AUDITLOG_INDEX_PREFIX/$auditlog_index_prefix/g" esconfig/main.tf
      sed -i "s/DNSLOG_INDEX_PREFIX/$dnslog_index_prefix/g" esconfig/main.tf
      sed -i "s/HTTPLOG_INDEX_PREFIX/$httplog_index_prefix/g" esconfig/main.tf

      echo "===Creating ES API key, User credentials and Index templates==="
      cd esconfig
      terraform init
      terraform apply --auto-approve
      es_apikey=$(terraform output -raw api_key)
      monitor_password=$(terraform output -raw monitor_password)
      admin_password=$(terraform output -raw admin_password)

      echo $es_apikey > /workspace/es_apikey
      echo $monitor_password > /workspace/monitor_password
      echo $admin_password > /workspace/admin_password

    else
      echo "*************** No elasticsearch required ******************"
    fi

# Setup Managed Prometheus for Elasticsearch monitoring
- name: 'hashicorp/terraform:latest'
  id: Managed Prometheus for monitoring
  entrypoint: 'sh'
  args: 
  - '-c'
  - |
    source deployment.conf
    monitor_password=$(cat /workspace/monitor_password)
    
    echo "===Generating manifest of elasticsearch-exporter==="
    sed -i "s/BACKEND_BUCKET_NAME/$bucket_name/g" monitoring/providers.tf
    sed -i "s/REGION_ID/$region/g" monitoring/variables.tf
    sed -i "s/PROJECT_ID/$PROJECT_ID/g" monitoring/variables.tf
    sed -i "s/CLUSTER_NAME/$cluster_name/g" monitoring/variables.tf

    sed -i "s/NAMESPACE/$namespace/g" monitoring/manifests/apikey.yaml
    # sed -i "s/ES_APIKEY/$es_apikey_b64/g" monitoring/manifests/apikey.yaml
    sed -i "s/NAMESPACE/$namespace/g" monitoring/manifests/elasticsearch-exporter.yaml
    sed -i "s/CLUSTER_NAME/$cluster_name/g" monitoring/manifests/elasticsearch-exporter.yaml
    sed -i "s/MONITOR_PASSWORD/$monitor_password/g" monitoring/manifests/elasticsearch-exporter.yaml
    sed -i "s/NAMESPACE/$namespace/g" monitoring/manifests/podmonitoring.yaml
    sed -i "s/NAMESPACE/$namespace/g" monitoring/manifests/alertrules.yaml

    if [ "$deploy_elasticsearch" == "true" ]; then
      echo "=== Install elasticsearch-exporter and PodMonitoring ==="
      cd monitoring
      terraform init
      terraform apply --auto-approve

    else
      echo "*************** No elasticsearch required ******************"
      cd monitoring
      terraform init
      terraform destroy --auto-approve
    fi

# Store Elasitcsearch endpoint and credentials into Secret Manager
- name: 'hashicorp/terraform:latest'
  id: Store Elasitcsearch endpoint and credentials into Secret Manager
  entrypoint: 'sh'
  args: 
  - '-c'
  - |
    source deployment.conf
    echo "===Get variables from previous step==="
    es_ip=$(cat /workspace/es_ip)
    es_password=$(cat /workspace/admin_password)
    es_apikey=$(cat /workspace/es_apikey)

    # echo "=== Elasticsearch endpoint: ${es_ip} ==="
    # echo "=== Elasticsearch password: ${es_password} ==="
    # echo "=== Elasticsearch API Key: ${es_apikey} ==="

    echo "===Generating terraform templates for Secret Manager==="
    sed -i "s/BACKEND_BUCKET_NAME/$bucket_name/g" secretmanager/providers.tf
    sed -i "s/REGION_ID/$region/g" secretmanager/variables.tf
    sed -i "s/PROJECT_ID/$PROJECT_ID/g" secretmanager/variables.tf

    sed -i "s/ES_IP/$es_ip/g" secretmanager/main.tf
    sed -i "s/ES_PASSWORD/$es_password/g" secretmanager/main.tf
    sed -i "s/ES_APIKEY/$es_apikey/g" secretmanager/main.tf

    if [ "$deploy_elasticsearch" == "true" ]; then
      echo "===Store es_ip, es_password, es_apikey into Secret Manager==="
      cd secretmanager
      terraform init
      terraform apply --auto-approve

    else
      echo "*************** No elasticsearch required ******************"
      cd secretmanager
      terraform init
      terraform destroy --auto-approve
    fi



# Create log pipeline for auditlog
- name: 'hashicorp/terraform:latest'
  id: Manage log pipeline for auditlog
  waitFor:
  - Store Elasitcsearch endpoint and credentials into Secret Manager
  entrypoint: 'sh'
  args: 
  - '-c'
  - |
    source deployment.conf
    es_ip=$(cat /workspace/es_ip)
    es_password=$(cat /workspace/es_password)

    echo "===Generating terraform templates for auditlog pipeline==="
    sed -i "s/BACKEND_BUCKET_NAME/$bucket_name/g" pipeline/auditlog/providers.tf
    sed -i "s/REGION_ID/$region/g" pipeline/auditlog/variables.tf
    sed -i "s/PROJECT_ID/$PROJECT_ID/g" pipeline/auditlog/variables.tf
    sed -i "s/BUCKET_NAME/$bucket_name/g" pipeline/auditlog/variables.tf
    sed -i "s/ORGANIZATION_ID/$organization_id/g" pipeline/auditlog/variables.tf
    sed -i "s/INDEX_PREFIX/$auditlog_index_prefix/g" pipeline/auditlog/src/main.py

    if [ "$auditlog" == "true" ]; then
      cd pipeline/auditlog
      terraform init
      terraform apply --auto-approve

    else
      echo "*************** No auditlog pipeline required ******************"
      cd pipeline/auditlog
      terraform init
      terraform destroy --auto-approve
    fi

# Create log pipeline for dnslog
- name: 'hashicorp/terraform:latest'
  id: Manage log pipeline for dnslog
  waitFor:
  - Store Elasitcsearch endpoint and credentials into Secret Manager
  entrypoint: 'sh'
  args: 
  - '-c'
  - |
    source deployment.conf
    es_ip=$(cat /workspace/es_ip)
    es_password=$(cat /workspace/es_password)

    echo "===Generating terraform templates for dnslog pipeline==="
    sed -i "s/BACKEND_BUCKET_NAME/$bucket_name/g" pipeline/dnslog/providers.tf
    sed -i "s/REGION_ID/$region/g" pipeline/dnslog/variables.tf
    sed -i "s/PROJECT_ID/$PROJECT_ID/g" pipeline/dnslog/variables.tf
    sed -i "s/BUCKET_NAME/$bucket_name/g" pipeline/dnslog/variables.tf
    sed -i "s/ORGANIZATION_ID/$organization_id/g" pipeline/dnslog/variables.tf
    sed -i "s/INDEX_PREFIX/$dnslog_index_prefix/g" pipeline/dnslog/src/main.py

    if [ "$dnslog" == "true" ]; then
      cd pipeline/dnslog
      terraform init
      terraform apply --auto-approve

    else
      echo "*************** No dnslog pipeline required ******************"
      cd pipeline/dnslog
      terraform init
      terraform destroy --auto-approve
    fi

# Create log pipeline for httplog
- name: 'hashicorp/terraform:latest'
  id: Manage log pipeline for httplog
  waitFor:
  - Store Elasitcsearch endpoint and credentials into Secret Manager
  entrypoint: 'sh'
  args: 
  - '-c'
  - |
    source deployment.conf

    echo "===Generating terraform templates for httplog pipeline==="
    sed -i "s/BACKEND_BUCKET_NAME/$bucket_name/g" pipeline/httplog/providers.tf
    sed -i "s/REGION_ID/$region/g" pipeline/httplog/variables.tf
    sed -i "s/PROJECT_ID/$PROJECT_ID/g" pipeline/httplog/variables.tf
    sed -i "s/BUCKET_NAME/$bucket_name/g" pipeline/httplog/variables.tf
    sed -i "s/ORGANIZATION_ID/$organization_id/g" pipeline/httplog/variables.tf
    sed -i "s/INDEX_PREFIX/$httplog_index_prefix/g" pipeline/httplog/src/main.py

    if [ "$httplog" == "true" ]; then
      cd pipeline/httplog
      terraform init
      terraform apply --auto-approve

    else
      echo "*************** No httplog pipeline required ******************"
      cd pipeline/httplog
      terraform init
      terraform destroy --auto-approve
    fi

# [END cloudbuild-trigger-cd]
