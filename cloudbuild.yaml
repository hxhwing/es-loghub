
# [START cloudbuild]
steps:
# Check whether create new GKE clsuter
- name: 'hashicorp/terraform:1.0.0'
  id: Create new GKE
  entrypoint: 'sh'
  args: 
  - '-c'
  - |
    source init.conf
    if [ "$create_new_cluster" == "true" ]; then
      sed -i "s/BACKEND_BUCKET_NAME/$bucket_name/g" gke/providers.tf
      sed -i "s/REGION_ID/$region/g" gke/variables.tf
      sed -i "s/PROJECT_ID/$PROJECT_ID/g" gke/variables.tf
      sed -i "s/NEW_CLUSTER_NAME/$cluster_name/g" gke/variables.tf
      cd gke
      terraform init
      terraform apply --auto-approve
    else
      echo "*************** No need to create new GKE cluster ******************"
    fi

# Create new node pool, and deploy all Elasitcsearch components
- name: 'hashicorp/terraform:1.0.0'
  id: Deploy Elasticsearch components
  waitFor:
  - Create new GKE
  entrypoint: 'sh'
  args: 
  - '-c'
  - |
    source init.conf
    echo "===Generating manifest of node pool==="
    sed -i "s/BACKEND_BUCKET_NAME/$bucket_name/g" eck/providers.tf
    sed -i "s/REGION_ID/$region/g" eck/variables.tf
    sed -i "s/PROJECT_ID/$PROJECT_ID/g" eck/variables.tf
    sed -i "s/NEW_CLUSTER_NAME/$cluster_name/g" eck/variables.tf
    sed -i "s/INSTANCE_TYPE/$instance_type/g" eck/variables.tf
    sed -i "s/INITIAL_NODE_COUNT/$node_count/g" eck/variables.tf
    echo "===Generating manifest of Elasticsearch==="
    sed -i "s/NAMESPACE/$namespace/g" eck/manifests/elasticsearch.yaml
    sed -i "s/ELASTICSEARCH_VERSION/$elasticsearch_version/g" eck/manifests/elasticsearch.yaml
    sed -i "s/MASTER_NODE_COUNT/$master_node_count/g" eck/manifests/elasticsearch.yaml
    sed -i "s/HOT_NODE_COUNT/$hot_node_count/g" eck/manifests/elasticsearch.yaml
    sed -i "s/HOT_STORAGE_SIZE/$hot_storage_size/g" eck/manifests/elasticsearch.yaml
    sed -i "s/WARM_NODE_COUNT/$warm_node_count/g" eck/manifests/elasticsearch.yaml
    sed -i "s/WARM_STORAGE_SIZE/$warm_storage_size/g" eck/manifests/elasticsearch.yaml
    sed -i "s/NAMESPACE/$namespace/g" eck/manifests/kibana.yaml
    sed -i "s/KIBANA_VERSION/$kibana_version/g" eck/manifests/kibana.yaml
    cd eck
    terraform init
    terraform apply --auto-approve
    # echo $cluster_name > /workspace/cluster_name

- name: 'gcr.io/google.com/cloudsdktool/google-cloud-cli:latest'
  id: Get ES and Kibana endpoint and credentials
  entrypoint: /bin/bash
  args:
  - '-c'
  - |
    source init.conf
    echo "===Get Elasticsearch access endpoint and credentials==="
    gcloud container clusters get-credentials $cluster_name --region $LOCATION
    password=$(kubectl get secret escluster-es-elastic-user -n es -o go-template='{{.data.elastic | base64decode }}')
    es_ip=$(kubectl get svc escluster-es-http -n es -o jsonpath='{.status.loadBalancer.ingress[].ip}')
    es_endpoint="https://$es_ip:9200"
    kibana_ip=$(kubectl get svc kibana-kb-http -n es -o jsonpath='{.status.loadBalancer.ingress[].ip}')
    kibana_endpoint="https://$kibana_ip:5601"

    # echo "===Put es_endpoint into Secret Manager==="
    # gcloud secrets delete es_endpoint --quiet
    # printf $es_endpoint | gcloud secrets create es_endpoint --data-file=-

    # # echo $password > /workspace/es_password
    # echo "===Put es_password into Secret Manager==="
    # gcloud secrets delete es_password --quiet
    # printf $password | gcloud secrets create es_password --data-file=-

    echo "===Create Elasticsearch API Key==="
    es_apikey=$(curl -s --insecure -u elastic:$password -XGET ${es_endpoint}/_security/api_key?name=admin | grep false)
    if [ -z "$es_apikey" ]; then
      # es_apikey=$(curl -s --insecure -u elastic:$password -XPOST ${es_endpoint}/_security/api_key?pretty -H 'Content-Type: application/json' -d '{"name": "admin"}' | jq --raw-output .encoded)
      es_apikey=$(curl -s --insecure -u elastic:$password -XPOST ${es_endpoint}/_security/api_key?pretty -H 'Content-Type: application/json' -d '{"name": "admin"}' |  python3 -c "import sys, json; print(json.load(sys.stdin)['encoded'])")
    else
      curl -s --insecure -u elastic:$password -XDELETE ${es_endpoint}/_security/api_key?pretty -H 'Content-Type: application/json' -d '{"name": "admin"}'
      es_apikey=$(curl -s --insecure -u elastic:$password -XPOST ${es_endpoint}/_security/api_key?pretty -H 'Content-Type: application/json' -d '{"name": "admin"}' | python3 -c "import sys, json; print(json.load(sys.stdin)['encoded'])")
    fi
    
    echo "=== Write environment into /workspace files for next step ==="
    echo $es_endpoint > /workspace/es_endpoint
    echo $es_password > /workspace/es_password
    echo $es_apikey > /workspace/es_apikey

    echo "=== Access Kibana UI through: ${kibana_endpoint} ==="

# Store Elasitcsearch endpoint and credentials into Secret Manager
- name: 'hashicorp/terraform:1.0.0'
  id: Store Elasitcsearch endpoint and credentials into Secret Manager
  entrypoint: 'sh'
  args: 
  - '-c'
  - |
    echo "===Get variables from last step==="
    es_endpoint=$(cat /workspace/es_endpoint)
    es_password=$(cat /workspace/es_password)
    es_apikey=$(cat /workspace/es_apikey)

    echo "===Generating terraform templates for Secret Manager==="
    sed -i "s/ES_ENDPOINT/$es_endpoint/g" secret-manager/main.tf
    sed -i "s/ES_PASSWORD/$es_password/g" secret-manager/main.tf
    sed -i "s/ES_APIKEY/$es_apikey/g" secret-manager/main.tf

    echo "===Save es_endpoint, es_password, es_apikey into Secret Manager==="
    cd secret-manager
    terraform init
    terraform apply --auto-approve
# [END cloudbuild-trigger-cd]
